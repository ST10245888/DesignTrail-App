package vcmsa.projects.fkj_consultants.activities

import android.content.Intent
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.test.core.app.ActivityScenario
import com.google.android.gms.tasks.OnCompleteListener
import com.google.android.gms.tasks.Task
import com.google.firebase.auth.AuthResult
import com.google.firebase.auth.FirebaseAuth
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.mockito.ArgumentCaptor
import org.mockito.Mockito.*
import org.robolectric.RobolectricTestRunner
import org.robolectric.shadows.ShadowToast
import vcmsa.projects.fkj_consultants.R

@RunWith(RobolectricTestRunner::class)
class LoginActivityTest {

    private lateinit var mockAuth: FirebaseAuth
    private lateinit var scenario: ActivityScenario<LoginActivity>

    @Before
    fun setUp() {
        mockAuth = mock(FirebaseAuth::class.java)

        // Override FirebaseAuth instance in the activity
        scenario = ActivityScenario.launch(LoginActivity::class.java).onActivity {
            it::class.java.getDeclaredField("auth").apply {
                isAccessible = true
                set(it, mockAuth)
            }
        }
    }

    @Test
    fun emptyFields_showToast() {
        scenario.onActivity {
            val btnLogin = it.findViewById<Button>(R.id.btnLogin)

            btnLogin.performClick()

            assert(ShadowToast.getTextOfLatestToast() == "All fields required")
        }
    }

    @Test
    fun validUserEmail_loginSuccess_opensUserDashboard() {
        scenario.onActivity {
            val etUsername = it.findViewById<EditText>(R.id.etUsername)
            val etPassword = it.findViewById<EditText>(R.id.etPassword)
            val btnLogin = it.findViewById<Button>(R.id.btnLogin)

            etUsername.setText("user@example.com")
            etPassword.setText("password")

            val task = mock(Task::class.java) as Task<AuthResult>
            `when`(task.isSuccessful).thenReturn(true)

            val captor = ArgumentCaptor.forClass(OnCompleteListener::class.java) as ArgumentCaptor<OnCompleteListener<AuthResult>>
            `when`(mockAuth.signInWithEmailAndPassword(anyString(), anyString())).thenReturn(task)

            btnLogin.performClick()

            verify(task).addOnCompleteListener(captor.capture())
            captor.value.onComplete(task)

            assert(ShadowToast.getTextOfLatestToast() == "User Login Successful")
        }
    }

    @Test
    fun adminEmail_loginSuccess_opensAdminDashboard() {
        scenario.onActivity {
            val etUsername = it.findViewById<EditText>(R.id.etUsername)
            val etPassword = it.findViewById<EditText>(R.id.etPassword)
            val btnLogin = it.findViewById<Button>(R.id.btnLogin)

            etUsername.setText("lovingkeshell@gmail.com")
            etPassword.setText("password")

            val task = mock(Task::class.java) as Task<AuthResult>
            `when`(task.isSuccessful).thenReturn(true)

            val captor = ArgumentCaptor.forClass(OnCompleteListener::class.java) as ArgumentCaptor<OnCompleteListener<AuthResult>>
            `when`(mockAuth.signInWithEmailAndPassword(anyString(), anyString())).thenReturn(task)

            btnLogin.performClick()

            verify(task).addOnCompleteListener(captor.capture())
            captor.value.onComplete(task)

            assert(ShadowToast.getTextOfLatestToast() == "Admin Login Successful")
        }
    }

    @Test
    fun loginFailure_showErrorToast() {
        scenario.onActivity {
            val etUsername = it.findViewById<EditText>(R.id.etUsername)
            val etPassword = it.findViewById<EditText>(R.id.etPassword)
            val btnLogin = it.findViewById<Button>(R.id.btnLogin)

            etUsername.setText("user@example.com")
            etPassword.setText("password")

            val task = mock(Task::class.java) as Task<AuthResult>
            `when`(task.isSuccessful).thenReturn(false)
            `when`(task.exception).thenReturn(Exception("Invalid credentials"))

            val captor = ArgumentCaptor.forClass(OnCompleteListener::class.java) as ArgumentCaptor<OnCompleteListener<AuthResult>>
            `when`(mockAuth.signInWithEmailAndPassword(anyString(), anyString())).thenReturn(task)

            btnLogin.performClick()

            verify(task).addOnCompleteListener(captor.capture())
            captor.value.onComplete(task)

            assert(ShadowToast.getTextOfLatestToast()!!.contains("Login Failed"))
        }
    }
}
